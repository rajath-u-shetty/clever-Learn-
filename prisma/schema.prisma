generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  providerAccountId String
  access_token      String?
  expires_at        Int?
  id_token          String?
  provider          String
  refresh_token     String?
  scope             String?
  session_state     String?
  token_type        String?
  type              String
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String           @id @default(cuid())
  name             String?
  email            String?          @unique
  emailVerified    DateTime?
  image            String?
  joined           DateTime         @default(now())
  unlimited        Boolean          @default(false)
  accounts         Account[]
  quizAttempts     Attempt[]
  flashcards       Flashcard[]
  flashcardSets    FlashcardSet[]
  generations      Generation[]
  messages         Message[]
  questions        Question[]
  quizzes          Quiz[]
  sessions         Session[]
  tutors           Tutor[]
  youTubeSummaries YouTubeSummary[]
}

model Generation {
  id     String   @id @default(cuid())
  type   String
  date   DateTime @default(now())
  userId String
  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model FlashcardSet {
  id          String      @id @default(cuid())
  title       String
  userId      String
  createdAt   DateTime    @default(now())
  description String
  flashcards  Flashcard[]
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Flashcard {
  id        String       @id @default(cuid())
  question  String
  answer    String
  setId     String
  createdAt DateTime     @default(now())
  userId    String
  set       FlashcardSet @relation(fields: [setId], references: [id], onDelete: Cascade)
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Tutor {
  id          String    @id @default(cuid())
  title       String
  description String
  source      String
  userId      String
  createdAt   DateTime  @default(now())
  messages    Message[]
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Message {
  id      String @id @default(cuid())
  role    String
  content String
  tutorId String
  userId  String
  tutor   Tutor  @relation(fields: [tutorId], references: [id], onDelete: Cascade)
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Quiz {
  id          String     @id @default(cuid())
  userId      String
  title       String
  description String
  createdAt   DateTime   @default(now())
  attempts    Attempt[]
  questions   Question[]
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Question {
  id              String   @id @default(cuid())
  userId          String
  quizId          String
  question        String
  possibleAnswers String[]
  correctAnswer   String
  createdAt       DateTime @default(now())
  quiz            Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Attempt {
  id          String   @id @default(cuid())
  userId      String
  quizId      String
  score       Decimal
  userAnswers String[]
  createdAt   DateTime @default(now())
  quiz        Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Summary {
  id        String @id @default(cuid())
  userId    String
  summaryId String
}

model YouTubeSummary {
  id         String   @id @default(cuid())
  videoUrl   String
  videoTitle String
  summary    String
  userId     String
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
